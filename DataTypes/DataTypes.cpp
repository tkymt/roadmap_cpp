// DataTypes.cpp : このファイルには 'main' 関数が含まれています。プログラム実行の開始と終了がそこで行われます。
//

#include <iostream>
#include <string>

int main()
{
// 基本データ型
	{
		// 整数型（int）
		int num = 42;

		// さまざまな範囲の数値を保持できるバリアントがあります
		// short     : より範囲が狭い
		// long	     : より範囲が広い
		// long long : さらに範囲が広い
	}
	{
	// 浮動小数点（float, double）
		// float : 単精度浮動小数点数 4バイトのメモリを占有します
		float pi = 3.14f;

		// double : 倍精度浮動小数点数 8バイトのメモリを占有します
		double pi_high_precision = 3.1415926535;
	}
	{
		// 文字（char）
		// １つの文字、数字、記号を表します 1バイトのメモリを占有します
		char letter = 'A';
	}
	{
		// ブール型
		// 論理値を表します 1バイトのメモリを占有します
		bool is_cpp_great = true;
	}
// 派生データ型
	{
		// 配列
		// 同じデータ型の複数の値を連続するメモリ位置に格納するために使用されます
		int numbers[5] = { 1, 2, 3, 4, 5 };
	}
	{
		// ポインター
		// 変数のメモリアドレスを格納するために使用されます
		int num = 42;
		int* pNum = &num;
	}
	{
		// 参照
		// 変数間でメモリ位置を共有する別の方法
		int num = 42;
		int& numRef = num;
	}
// ユーザー定義データ型
	{
		// 構造体（struct）
		// さまざまなデータ型を１つの変数の下に格納するためにしようされます
		// メンバー変数とメソッドのアクセシビリティはパブリックです
		struct Person
		{
			std::string name;
			int age;
			float height;
		};

		Person p1 = { "Jhon Doe", 30, 5.9 };
	}
	{
		// クラス（class）
		// 構造体と似ていますが、クラスのメンバー変数とメソッドのアクセシビリティはプライベートです
		// アクセシビリティをアクセス指定子によって制御できます
		class Person {
		public:
			std::string name;
			int age;

			void printInfo() {
				std::cout << "Name: " << name << ", Age: " << age << std::endl;
			}
		};

		Person p1;
		p1.name = "John Doe";
		p1.age = 30;
	}
	{
		// 共用体（union）
		// 異なるデータ型を同じメモリ位置に格納するために使用されます
		union Data
		{
			int num;
			char letter;
			float decimal;
		};

		Data myData;
		myData.num = 42;
	}
}

// プログラムの実行: Ctrl + F5 または [デバッグ] > [デバッグなしで開始] メニュー
// プログラムのデバッグ: F5 または [デバッグ] > [デバッグの開始] メニュー

// 作業を開始するためのヒント: 
//    1. ソリューション エクスプローラー ウィンドウを使用してファイルを追加/管理します 
//   2. チーム エクスプローラー ウィンドウを使用してソース管理に接続します
//   3. 出力ウィンドウを使用して、ビルド出力とその他のメッセージを表示します
//   4. エラー一覧ウィンドウを使用してエラーを表示します
//   5. [プロジェクト] > [新しい項目の追加] と移動して新しいコード ファイルを作成するか、[プロジェクト] > [既存の項目の追加] と移動して既存のコード ファイルをプロジェクトに追加します
//   6. 後ほどこのプロジェクトを再び開く場合、[ファイル] > [開く] > [プロジェクト] と移動して .sln ファイルを選択します
